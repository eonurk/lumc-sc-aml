p2
dev.off()
cell.type.order <-
immune.combined@meta.data%>% dplyr::count_("label") %>% arrange(-n) %>% pull(label)
xmat <- immune.combined@assays$integrated
# exponentiate the data to non-log scale
xmat@data <- expm1(xmat@data)
xmeta <- immune.combined@meta.data
xmeta$Cell <- rownames(xmeta)
sample.proportions <- seq(0.5, 1, 0.1)
total.cells <- c(1000)
library(MuSiC)
library(xbioc)
C.eset <- Biobase::ExpressionSet(assayData = as.matrix(xmat@data), phenoData = Biobase::AnnotatedDataFrame(xmeta))
count.TCGA <- read.csv("data/Other studies/TCGA/TCGA_ht_seq.csv")
count.TCGA <- wrangleMat(count.TCGA)
mut.TCGA <- read.csv("data/Other studies/TCGA/TCGA_mutations_2_oh_meta.csv", row.names = 1)
meta.TCGA <- read.csv("data/Other studies/TCGA/TCGA_ht_seq_meta.csv", row.names = 1)
# ens to symbol map
ens2gene <- cinaR::grch38
m <- match(rownames(count.TCGA), ens2gene$ensgene)
mapped.genes <- ens2gene$symbol[m]
# duplicated name/NA/mitochondrial genes
removed.genes <- duplicated(mapped.genes) | is.na(mapped.genes) | grepl("^MT", mapped.genes)
count.TCGA <- count.TCGA[!removed.genes,]
rownames(count.TCGA) <- mapped.genes[!removed.genes]
# deconv.TCGA <- CIBERSORT(pb.sum, count.TCGA, perm = 1000, QN = F)
T.eset <- ExpressionSet(assayData = as.matrix(count.TCGA))
deconv.TCGA <- music_prop(bulk.eset = T.eset, sc.eset = C.eset, clusters = 'label',
markers = NULL, normalize = FALSE, samples = 'Sample',
verbose = F)$Est.prop.weighted
ann.row.TCGA <- cbind(mut.TCGA[,mutations], Blast = meta.TCGA[,"BM_blasts"])
# pdf("output/CIBERSORT_TCGA_deconvolution_via_integrated_pseudobulk.pdf", width = 12, height = 12)
# pheatmap(deconv.TCGA [, intersect(cell.type.order, colnames(deconv.TCGA))], cluster_cols = F, cluster_rows = T, annotation_row = ann.row.TCGA,
#          color = pheatmap.colors, breaks = breaksList, border_color = NA, fontsize_row = 5)
# dev.off()
pdf("output/Music_TCGA_deconvolution_via_integrated_pseudobulk.pdf", width = 12, height = 12)
pheatmap(deconv.TCGA [, intersect(cell.type.order, colnames(deconv.TCGA))], cluster_cols = F, cluster_rows = T, annotation_row = ann.row.TCGA,
color = pheatmap.colors, breaks = breaksList, border_color = NA, fontsize_row = 5)
breaksList = seq(0,1, by = .01)
pheatmap.colors <- colorRampPalette((brewer.pal(n = 7, name = "Blues")))(length(breaksList))
pdf("output/Music_TCGA_deconvolution_via_integrated_pseudobulk.pdf", width = 12, height = 12)
pheatmap(deconv.TCGA [, intersect(cell.type.order, colnames(deconv.TCGA))], cluster_cols = F, cluster_rows = T, annotation_row = ann.row.TCGA,
color = pheatmap.colors, breaks = breaksList, border_color = NA, fontsize_row = 5)
dev.off()
load("cache/Integrated_sc_deconvolutions_of_bulks.Rdata")
library(ggridges)
df <- cbind(deconv.all, ann.row.all)
df <- df[,c("Blast", "Study", cell.type.order)]
pdf("output/Blast_percentage_each_study.pdf", width = 8, height = 6)
ggplot(df, aes(x = Blast, y = Study, fill = stat(x))) +
geom_density_ridges_gradient(scale = 1, rel_min_height = 0.01, jittered_points = TRUE) +
scale_fill_viridis(name = "Blast %", option = "C") +
theme.gg
dev.off()
count.BEAT <- read.csv("data/Other studies/BEAT/BEAT_AML_ht_seq.csv")
count.BEAT <- wrangleMat(count.BEAT)
mut.BEAT <- read.csv("data/Other studies/BEAT/BEAT_AML_mutations.csv", row.names = 1)
meta.BEAT <- read.csv("data/Other studies/BEAT/BEAT_AML_ht_seq_meta.csv", row.names = 1)
meta.blast.BEAT <- read.csv("data/meta_GDC_LUMC.csv")
meta.blast.BEAT <- meta.blast.BEAT %>% filter(study == "BEAT")
meta.BEAT <- merge(meta.BEAT, meta.blast.BEAT[,c("ID", "blasts")], by = "ID")
deconv.all <- rbind(deconv.TCGA,
deconv.LUMC,
deconv.BEAT,
deconv.TARGET)
load("cache/Integrated_sc_deconvolutions_of_bulks.Rdata")
View(deconv.all)
View(ann.row.all)
C.eset <- Biobase::ExpressionSet(assayData = as.matrix(xmat@data), phenoData = Biobase::AnnotatedDataFrame(xmeta))
cell.type.order <-
immune.combined@meta.data%>% dplyr::count_("label") %>% arrange(-n) %>% pull(label)
immune.combined <- readRDS("data/Integrated_TRI_VG_Seurat.RDS")
DefaultAssay(immune.combined) <- "integrated"
Idents(immune.combined) <- "label"
immune.combined <- subset(immune.combined,
idents = c("Doublet and Triplets"),
invert = T)
pb.sum <- as.data.frame(AggregateExpression(immune.combined, assays = "integrated"))
pb.avg <- as.data.frame(AverageExpression(immune.combined, assays = "integrated"))
colnames(pb.sum) <- unique(Idents(immune.combined))
colnames(pb.avg) <- unique(Idents(immune.combined))
cell.type.order <-
immune.combined@meta.data%>% dplyr::count_("label") %>% arrange(-n) %>% pull(label)
cell.type.order.250 <-
immune.combined@meta.data%>% dplyr::count_("label") %>% arrange(-n) %>% filter(n > 250)
xmat <- immune.combined@assays$integrated
# exponentiate the data to non-log scale
xmat@data <- expm1(xmat@data)
xmeta <- immune.combined@meta.data
xmeta$Cell <- rownames(xmeta)
sample.proportions <- seq(0.5, 1, 0.1)
total.cells <- c(1000)
library(MuSiC)
library(xbioc)
C.eset <- Biobase::ExpressionSet(assayData = as.matrix(xmat@data), phenoData = Biobase::AnnotatedDataFrame(xmeta))
count.TCGA <- read.csv("data/Other studies/TCGA/TCGA_ht_seq.csv")
count.TCGA <- wrangleMat(count.TCGA)
source("utils/wrangleMat.R")
count.TCGA <- read.csv("data/Other studies/TCGA/TCGA_ht_seq.csv")
count.TCGA <- wrangleMat(count.TCGA)
mut.TCGA <- read.csv("data/Other studies/TCGA/TCGA_mutations_2_oh_meta.csv", row.names = 1)
meta.TCGA <- read.csv("data/Other studies/TCGA/TCGA_ht_seq_meta.csv", row.names = 1)
# ens to symbol map
ens2gene <- cinaR::grch38
m <- match(rownames(count.TCGA), ens2gene$ensgene)
mapped.genes <- ens2gene$symbol[m]
# duplicated name/NA/mitochondrial genes
removed.genes <- duplicated(mapped.genes) | is.na(mapped.genes) | grepl("^MT", mapped.genes)
count.TCGA <- count.TCGA[!removed.genes,]
rownames(count.TCGA) <- mapped.genes[!removed.genes]
# deconv.TCGA <- CIBERSORT(pb.sum, count.TCGA, perm = 1000, QN = F)
T.eset <- ExpressionSet(assayData = as.matrix(count.TCGA))
deconv.TCGA <- music_prop(bulk.eset = T.eset, sc.eset = C.eset, clusters = 'label',
markers = NULL, normalize = FALSE, samples = 'Sample',
verbose = F)$Est.prop.weighted
ann.row.TCGA <- cbind(mut.TCGA[,mutations], Blast = meta.TCGA[,"BM_blasts"])
breaksList = seq(0,1, by = .001)
pheatmap.colors <- colorRampPalette((brewer.pal(n = 7, name = "Blues")))(length(breaksList))
pdf("output/Music_TCGA_deconvolution_via_integrated_pseudobulk.pdf", width = 12, height = 12)
pheatmap(deconv.TCGA [, intersect(cell.type.order, colnames(deconv.TCGA))], cluster_cols = F, cluster_rows = T, annotation_row = ann.row.TCGA,
color = pheatmap.colors, breaks = breaksList, border_color = NA, fontsize_row = 5)
deconv.TCGA <- music_prop(bulk.eset = T.eset, sc.eset = C.eset, clusters = 'label',
markers = NULL, normalize = FALSE, samples = 'Sample',
verbose = F)$Est.prop.weighted
mutations <- c("NPM1", "DNMT3A","FLT3")
ann.row.TCGA <- cbind(mut.TCGA[,mutations], Blast = meta.TCGA[,"BM_blasts"])
breaksList = seq(0,1, by = .001)
pheatmap.colors <- colorRampPalette((brewer.pal(n = 7, name = "Blues")))(length(breaksList))
pdf("output/Music_TCGA_deconvolution_via_integrated_pseudobulk.pdf", width = 12, height = 12)
pheatmap(deconv.TCGA [, intersect(cell.type.order, colnames(deconv.TCGA))], cluster_cols = F, cluster_rows = T, annotation_row = ann.row.TCGA,
color = pheatmap.colors, breaks = breaksList, border_color = NA, fontsize_row = 5)
dev.off()
count.LUMC <- read.csv("data/Other studies/LUMC/LUMC_counts_htseq.csv")
count.LUMC <- wrangleMat(count.LUMC)
mut.LUMC <- read.csv("data/Other studies/LUMC/LUMC_mutations_oh_meta.csv", row.names = 1)
rownames(mut.LUMC) <- colnames(count.LUMC)
# Union FLT3 mutations to get a vector
mut.LUMC[,"FLT3"] <- ifelse(rowSums(mut.LUMC[,c("FLT3.ITD", "FLT3.TKD")] == 1) > 0, 1, 0)
meta.LUMC <- read.csv("data/Other studies/LUMC/meta_AML_LUMC.csv", row.names = 1)
# ens to symbol map
ens2gene <- cinaR::grch38
m <- match(rownames(count.LUMC), ens2gene$ensgene)
mapped.genes <- ens2gene$symbol[m]
# duplicated name/NA/mitochondrial genes
removed.genes <- duplicated(mapped.genes) | is.na(mapped.genes) | grepl("^MT", mapped.genes)
count.LUMC <- count.LUMC[!removed.genes,]
rownames(count.LUMC) <- mapped.genes[!removed.genes]
# deconv.LUMC <- CIBERSORT(pb.sum, count.LUMC, perm = 1000, QN = F)
T.eset <- ExpressionSet(assayData = as.matrix(count.LUMC))
deconv.LUMC <- music_prop(bulk.eset = T.eset, sc.eset = C.eset, clusters = 'label',
markers = NULL, normalize = FALSE, samples = 'Sample',
verbose = F)$Est.prop.weighted
ann.row.LUMC <- cbind(mut.LUMC[,c(mutations,"FLT3.ITD", "FLT3.TKD")], Blast = meta.LUMC[,"blast_percentage"])
pdf("output/Music_LUMC_deconvolution_via_integrated_pseudobulk.pdf", width = 12, height = 12)
pheatmap(deconv.LUMC[,intersect(cell.type.order, colnames(deconv.LUMC))] , cluster_cols = F, cluster_rows = T,  annotation_row = ann.row.LUMC,
color = pheatmap.colors, breaks = breaksList, border_color = NA, fontsize_row = 5)
dev.off()
count.BEAT <- read.csv("data/Other studies/BEAT/BEAT_AML_ht_seq.csv")
count.BEAT <- wrangleMat(count.BEAT)
mut.BEAT <- read.csv("data/Other studies/BEAT/BEAT_AML_mutations.csv", row.names = 1)
meta.BEAT <- read.csv("data/Other studies/BEAT/BEAT_AML_ht_seq_meta.csv", row.names = 1)
meta.blast.BEAT <- read.csv("data/meta_GDC_LUMC.csv")
meta.blast.BEAT <- meta.blast.BEAT %>% filter(study == "BEAT")
meta.BEAT <- merge(meta.BEAT, meta.blast.BEAT[,c("ID", "blasts")], by = "ID")
# ens to symbol map
ens2gene <- cinaR::grch38
m <- match(rownames(count.BEAT), ens2gene$ensgene)
mapped.genes <- ens2gene$symbol[m]
# duplicated name/NA/mitochondrial genes
removed.genes <- duplicated(mapped.genes) | is.na(mapped.genes) | grepl("^MT", mapped.genes)
count.BEAT <- count.BEAT[!removed.genes,]
rownames(count.BEAT) <- mapped.genes[!removed.genes]
# deconv.BEAT <- CIBERSORT(pb.sum, count.BEAT, perm = 100, QN = F)
T.eset <- ExpressionSet(assayData = as.matrix(count.BEAT))
deconv.BEAT <- music_prop(bulk.eset = T.eset, sc.eset = C.eset, clusters = 'label',
markers = NULL, normalize = FALSE, samples = 'Sample',
verbose = F)$Est.prop.weighted
ann.row.BEAT <- cbind(mut.BEAT[,mutations], Blast = meta.BEAT$blasts)
breaksList = seq(0,1, by = .001)
pheatmap.colors <- colorRampPalette((brewer.pal(n = 7, name = "Blues")))(length(breaksList))
pdf("output/Music_BEAT_deconvolution_via_integrated_pseudobulk.pdf", width = 12, height = 12)
pheatmap(deconv.BEAT[,intersect(cell.type.order, colnames(deconv.BEAT))] , cluster_cols = F, cluster_rows = T,  annotation_row = ann.row.BEAT,
color = pheatmap.colors, breaks = breaksList, border_color = NA, fontsize_row = 5)
dev.off()
count.TARGET <- read.csv("data/Other studies/TARGET/TARGET_ht_seq.csv")
count.TARGET <- wrangleMat(count.TARGET)
# ens to symbol map
ens2gene <- cinaR::grch38
m <- match(rownames(count.TARGET), ens2gene$ensgene)
mapped.genes <- ens2gene$symbol[m]
# duplicated name/NA/mitochondrial genes
removed.genes <- duplicated(mapped.genes) | is.na(mapped.genes) | grepl("^MT", mapped.genes)
count.TARGET <- count.TARGET[!removed.genes,]
rownames(count.TARGET) <- mapped.genes[!removed.genes]
mut.TARGET <- read.csv("data/Other studies/TARGET/TARGET_mutations_df_3.csv", row.names = 1)
mut.TARGET[,colnames(mut.TARGET) %in% mutations]
meta.TARGET <- read.csv("data/Other studies/TARGET/TARGET_ht_seq_meta.csv", row.names = 1)
# deconv.TARGET <- CIBERSORT(pb.sum, count.TARGET, perm = 100, QN = F)
T.eset <- ExpressionSet(assayData = as.matrix(count.TARGET))
deconv.TARGET <- music_prop(bulk.eset = T.eset, sc.eset = C.eset, clusters = 'label',
markers = NULL, normalize = FALSE, samples = 'Sample',
verbose = F)$Est.prop.weighted
ann.row.TARGET <- cbind(mut.TARGET[,colnames(mut.TARGET)%in%mutations], Blast = meta.TARGET[,"BM_blasts"])
pdf("output/Music_TARGET_deconvolution_via_integrated_pseudobulk.pdf", width = 12, height = 12)
pheatmap(deconv.TARGET[,intersect(cell.type.order, colnames(deconv.TARGET))] ,
cluster_cols = F, cluster_rows = T,  annotation_row = ann.row.TARGET,
color = pheatmap.colors, breaks = breaksList, border_color = NA, fontsize_row = 5)
dev.off()
deconv.all <- rbind(deconv.TCGA,
deconv.LUMC,
deconv.BEAT,
deconv.TARGET)
deconv.all.list <- list( TCGA = deconv.TCGA,
LUMC = deconv.LUMC,
BEAT = deconv.BEAT,
TARGET = deconv.TARGET)
ann.row.all <- rbind.fill(cbind(ann.row.TCGA, Study = "TCGA"),
cbind(ann.row.LUMC, Study = "LUMC"),
cbind(ann.row.BEAT, Study = "BEAT"),
cbind(ann.row.TARGET, Study = "TARGET"))
rownames(ann.row.all) <- rownames(deconv.all)
pdf("output/Music_ALL_deconvolution_via_integrated_pseudobulk.pdf", width = 12, height = 12)
pheatmap(deconv.all[,intersect(cell.type.order, colnames(deconv.all))] , cluster_cols = F, cluster_rows = T,
annotation_row = ann.row.all, show_rownames = F,
color = pheatmap.colors, breaks = breaksList, border_color = NA, fontsize_row = 5)
dev.off()
save(ann.row.all, deconv.all, file = "Desktop/LUMC/cache/Integrated_sc_deconvolutions_of_bulks.Rdata")
library(ggridges)
df <- cbind(deconv.all, ann.row.all)
df <- df[,c("Blast", "Study", cell.type.order)]
cell.type.order
View(df)
View(df)
cell.type.order
df <- df[,c("Blast", "Study", cell.type.order[cell.type.order %in% colnames(df)])]
View(df)
pdf("output/Blast_percentage_each_study.pdf", width = 8, height = 6)
ggplot(df, aes(x = Blast, y = Study, fill = stat(x))) +
geom_density_ridges_gradient(scale = 1, rel_min_height = 0.01, jittered_points = TRUE) +
scale_fill_viridis(name = "Blast %", option = "C") +
theme.gg
source("utils/CIBERSORT.R")
source("utils/wrangleMat.R")
theme.gg <- theme_bw(base_size = 10) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
cp.pastel <- paletteer_d("rcartocolor::Pastel")
cp.polyco <- paletteer_d("Polychrome::light")
pdf("output/Blast_percentage_each_study.pdf", width = 8, height = 6)
ggplot(df, aes(x = Blast, y = Study, fill = stat(x))) +
geom_density_ridges_gradient(scale = 1, rel_min_height = 0.01, jittered_points = TRUE) +
scale_fill_viridis(name = "Blast %", option = "C") +
theme.gg
dev.off()
common.mutations <-
Reduce(intersect, list(colnames(mut.BEAT),
colnames(mut.LUMC),
colnames(mut.TARGET),
colnames(mut.TCGA)))
mut.all <- rbind(mut.TCGA[,common.mutations],
mut.LUMC[,common.mutations],
mut.BEAT[,common.mutations],
mut.TARGET[,common.mutations])
mut.all.list <- list(TCGA = mut.TCGA[,common.mutations],
LUMC = mut.LUMC[,common.mutations],
BEAT = mut.BEAT[,common.mutations],
TARGET = mut.TARGET[,common.mutations])
cell.type.order.new <- intersect(cell.type.order, colnames(deconv.all))
cell.type.order.new <- intersect(cell.type.order, colnames(deconv.all))
df <- cbind(deconv.all, ann.row.all)
df <- df[,c("Blast", "Study", cell.type.order.new)]
pdf("output/Blast_percentage_each_study.pdf", width = 8, height = 6)
ggplot(df, aes(x = Blast, y = Study, fill = stat(x))) +
geom_density_ridges_gradient(scale = 1, rel_min_height = 0.01, jittered_points = TRUE) +
scale_fill_viridis(name = "Blast %", option = "C") +
theme.gg
dev.off()
common.mutations <-
Reduce(intersect, list(colnames(mut.BEAT),
colnames(mut.LUMC),
colnames(mut.TARGET),
colnames(mut.TCGA)))
mut.all <- rbind(mut.TCGA[,common.mutations],
mut.LUMC[,common.mutations],
mut.BEAT[,common.mutations],
mut.TARGET[,common.mutations])
mut.all.list <- list(TCGA = mut.TCGA[,common.mutations],
LUMC = mut.LUMC[,common.mutations],
BEAT = mut.BEAT[,common.mutations],
TARGET = mut.TARGET[,common.mutations])
cell.type.order.new <- intersect(cell.type.order, colnames(deconv.all))
View(df)
ggplot(df, aes(Blasts, df[,4])) + geom_point() + theme.gg
View(df)
ggplot(df, aes(Blast, df[,4])) + geom_point() + theme.gg
View(df)
cell.type.order.new
ggplot(df, aes(Blast, df[,x])) + geom_point() + theme.gg + labs(title = x)
pdf("output/Blast_vs_Cell_type_props.pdf")
lapply(cell.type.order.new, function(x){
ggplot(df, aes(Blast, df[,x])) + geom_point() + theme.gg + labs(title = x )
})
dev.off()
pdf("output/Blast_vs_Cell_type_props.pdf")
lapply(cell.type.order.new, function(x){
ggplot(df, aes(df[,x]), Blast) + geom_point() + theme.gg + labs(title = x )
}) %>% invisible
dev.off()
pdf("output/Blast_vs_Cell_type_props.pdf")
lapply(cell.type.order.new, function(x){
ggplot(df, aes(df[,x]), Blast) + geom_point() + theme.gg + labs(title = x )
})
pdf("output/Blast_vs_Cell_type_props.pdf")
lapply(cell.type.order.new, function(x){
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x )
})
dev.off()
utils::install.packages("ggside")
library(ggside)
library(ggside)
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x ) + geom_xsidedensity()
x <- cell.type.order.new[1]
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x ) + geom_xsidedensity()
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x ) + geom_xsidedensity() + geom_ysideboxplot()
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x ) + geom_xsidedensity() + geom_ysidedensity()
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x ) + geom_xsidedensity() + geom_ysidedensity() + theme(axis.text.x = element_text(angle = 90, vjust = .5))
pdf("output/Blast_vs_Cell_type_props.pdf")
lapply(cell.type.order.new, function(x){
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x ) + geom_xsidedensity() + geom_ysidedensity() + theme(axis.text.x = element_text(angle = 90, vjust = .5))
})
dev.off()
library(ggside)
pdf("output/Blast_vs_Cell_type_props.pdf")
lapply(cell.type.order.new, function(x){
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x, xlab = "Cell type prop." ) +
geom_xsidedensity() + geom_ysidedensity() +
theme(axis.text.x = element_text(angle = 90, vjust = .5))
})
dev.off()
pdf("output/Blast_vs_Cell_type_props.pdf")
lapply(cell.type.order.new, function(x){
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x, x = "Cell type prop." ) +
geom_xsidedensity() + geom_ysidedensity() +
theme(axis.text.x = element_text(angle = 90, vjust = .5))
})
dev.off()
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x, x = "Cell type prop." ) +
geom_xsidedensity() + geom_ysidedensity() +
theme(axis.text.x = element_text(angle = 90, vjust = .5)) + geom_smooth()
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x, x = "Cell type prop." ) +
geom_xsidedensity() + geom_ysidedensity() +
theme(axis.text.x = element_text(angle = 90, vjust = .5)) + geom_smooth(method = "lm")
pdf("output/Blast_vs_Cell_type_props.pdf")
lapply(cell.type.order.new, function(x){
ggplot(df, aes(df[,x], Blast)) + geom_point() + theme.gg + labs(title = x, x = "Cell type prop." ) +
geom_xsidedensity() + geom_ysidedensity() +
theme(axis.text.x = element_text(angle = 90, vjust = .5)) + geom_smooth(method = "lm")
})
dev.off()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Desktop/LUMC/")
library(data.table)
library(plyr)
library(dplyr)
library(reshape2)
library(purrr)
# Example file to see what it looks like
count.matrix <- fread("data/vanGalen/GSM3587923_AML1012-D0.dem.txt.gz")
gene.list <- count.matrix[,1]
# list all gene x cell files
cm.paths <- list.files(pattern = "dem", recursive = T)
# list all meta files
meta.paths <- list.files(pattern = "anno", recursive = T)
big.cm <- data.frame(Gene = gene.list)
for (file in cm.paths){
big.cm <- cbind(big.cm, fread(file, drop = "Gene"))
}
# transfer gene-names to rownames
rownames(big.cm) <- big.cm$Gene
big.cm <- big.cm[,-1]
big.meta <- data.frame()
for (file in meta.paths){
big.meta <- rbind.fill(big.meta, fread(file, fill = T))
}
rownames(big.meta) <- big.meta[,"Cell"]
# check every cell-id matches the columns
sum(colnames(big.cm) %in% rownames(big.meta)) == nrow(big.meta)
big.meta$Sample <- strsplit(big.meta$Cell, "-", fixed = T) %>%
map_chr(1) %>% strsplit("_", fixed = T) %>%
map_chr(1)
big.meta$Day <- sapply(big.meta$Cell, function(x){ifelse(grepl("-D",x),
strsplit(x, "-", fixed = T) %>%
map_chr(2) %>%
strsplit("_", fixed = T) %>%
map_chr(1), NA)})
bm.loc <- grepl("BM",big.meta$Sample)
aml.loc <- grepl("AML", big.meta$Sample)
bm.data <- big.cm[,bm.loc]
bm.meta <- big.meta[bm.loc,]
aml.data <- big.cm[,aml.loc]
aml.meta <- big.meta[aml.loc,]
# remove all except seurat object and colors
# rm(list=setdiff(ls(), c("aml.data", "aml.meta")))
patients <- unique(aml.meta$Sample)
pt <- patients[1]
pt <- "AML329"
setwd("Desktop/LUMC/")
ref.list <- c("GMP", "Mono", "Prog", "cDC", "HSC", "ProMono", "earlyEry",
"CTL", "T", "Plasma", "ProB", "NK", "B", "lateEry", "pDC")
meta <- read.table(paste0("data/InferCNV/", pt, "/VanGalen_AML_meta.txt"))
# Not all samples include all ref cell types
ref.list <- intersect(meta[,2], ref.list)
if(all(unique(meta[,2]) %in% ref.list)){
message("\t>> Passing ", pt, " as there is no cancerous cells!")
return(NULL)
}
ref.list
unique(meta[,2])
View(meta)
data <- read.table(paste0("data/InferCNV/", pt, "/VanGalen_AML_expr.txt"))
meta$V1
head(data)
lapply(patients, function(pt){
ref.list <- c("GMP", "Mono", "Prog", "cDC", "HSC", "ProMono", "earlyEry",
"CTL", "T", "Plasma", "ProB", "NK", "B", "lateEry", "pDC")
meta <- read.table(paste0("data/InferCNV/", pt, "/VanGalen_AML_meta.txt"))
data <- read.table(paste0("data/InferCNV/", pt, "/VanGalen_AML_expr.txt"))
# Not all samples include all ref cell types
ref.list <- intersect(meta[,2], ref.list)
if(all(unique(meta[,2]) %in% ref.list)){
message("\t>> Passing ", pt, " as there is no cancerous cells!")
return(NULL)
}
infercnv_obj = CreateInfercnvObject(raw_counts_matrix=paste0("data/InferCNV/", pt, "/VanGalen_AML_expr.txt"),
annotations_file=paste0("data/InferCNV/", pt, "/VanGalen_AML_meta.txt"),
delim="\t",
gene_order_file="data/InferCNV/gencode_v19_gene_pos.txt",
ref_group_names=ref.list)
output.dir <- paste0("output/InferCNV/", pt)
dir.create(output.dir)
infercnv_obj = infercnv::run(infercnv_obj,
cutoff= 1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
out_dir=output.dir,
cluster_by_groups=TRUE,
denoise=TRUE,
HMM=FALSE)
rm(infercnv_obj, meta)
gc()
})
patients <- list.dirs("data/InferCNV/", full.names = F)[-1]
pt <- patients [2]
meta <- read.table(paste0("data/InferCNV/", pt, "/VanGalen_AML_meta.txt"))
data <- read.table(paste0("data/InferCNV/", pt, "/VanGalen_AML_expr.txt"))
rownames(data)
colnames(data)
meta
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Desktop/LUMC/")
vanGalen (BM)
# vanGalen (BM)
# Example file to see what it looks like
count.matrix <- fread("data/vanGalen/GSM3587923_AML1012-D0.dem.txt.gz")
library(data.table)
library(plyr)
library(dplyr)
library(reshape2)
library(purrr)
# vanGalen (BM)
# Example file to see what it looks like
count.matrix <- fread("data/vanGalen/GSM3587923_AML1012-D0.dem.txt.gz")
gene.list <- count.matrix[,1]
# list all gene x cell files
cm.paths <- list.files(pattern = "dem", recursive = T)
# list all meta files
meta.paths <- list.files(pattern = "anno", recursive = T)
big.cm <- data.frame(Gene = gene.list)
for (file in cm.paths){
big.cm <- cbind(big.cm, fread(file, drop = "Gene"))
}
# transfer gene-names to rownames
rownames(big.cm) <- big.cm$Gene
big.cm <- big.cm[,-1]
big.meta <- data.frame()
for (file in meta.paths){
big.meta <- rbind.fill(big.meta, fread(file, fill = T))
}
rownames(big.meta) <- big.meta[,"Cell"]
# check every cell-id matches the columns
sum(colnames(big.cm) %in% rownames(big.meta)) == nrow(big.meta)
big.meta$Sample <- strsplit(big.meta$Cell, "-", fixed = T) %>%
map_chr(1) %>% strsplit("_", fixed = T) %>%
map_chr(1)
big.meta$Day <- sapply(big.meta$Cell, function(x){ifelse(grepl("-D",x),
strsplit(x, "-", fixed = T) %>%
map_chr(2) %>%
strsplit("_", fixed = T) %>%
map_chr(1), NA)})
bm.loc <- grepl("BM",big.meta$Sample)
aml.loc <- grepl("AML", big.meta$Sample)
bm.data <- big.cm[,bm.loc]
bm.meta <- big.meta[bm.loc,]
aml.data <- big.cm[,aml.loc]
aml.meta <- big.meta[aml.loc,]
# remove all except seurat object and colors
# rm(list=setdiff(ls(), c("aml.data", "aml.meta")))
patients <- unique(aml.meta$Sample)
pt <- patients[1]
aml.meta.pt <- aml.meta %>% dplyr::filter(Sample == pt)
if(nrow(aml.meta.pt) > 2e3){
aml.meta.pt <- aml.meta.pt[sample(nrow(aml.meta.pt), size = 2e3),]
}
aml.meta.pt <- aml.meta.pt %>% group_by(CellType) %>% filter(n() > 1)
View(aml.meta.pt)
